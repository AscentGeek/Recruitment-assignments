function solution(triangle){
    for(let i=1; i<triangle.length; i++){
        for (let j=0; j<triangle[i].length; j++){
            if(i==1) {
                triangle[i][j] += triangle[0][0];
            } else if(j==0){
                triangle[i][j] += triangle[i-1][j]
            } else if(j==i){
                triangle[i][j] += triangle[i-1][j-1]
            } else{
                triangle[i][j] += Math.max(triangle[i-1][j-1], triangle[i-1][j])
            }
        }
    }
    let result = triangle[triangle.length-1];
    return Math.max(...result);
}

console.log(solution([[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]));

삼각형의 x, y축을 순회하며 각각 좌, 우상단에 존재하는 값 중 최대값을 더한다.
두번째 y축의 경우 꼭대기 하나의 값만 존재하기 때문에 이를 그대로 더한다.
x축의 양 끝의 경우 좌, 우상단 중 한개의 값만 존재하기 때문에
x축 좌측 끝의 경우 우상단, 우측 끝의 경우 좌상단 값을 더해준다.
나머지 값의 경우 각각 좌, 우상단 중 더 큰 값을 더한다.
순회 결과 맨 아래의 최대의 값이 존재하기 때문에 맨 아래의 값 중 최대값을 반환한다.
